{
  "folderName": "scripts",
  "folderPath": ".autodoc/docs/json/scripts",
  "url": "https://github.com/opshin/opshin/.autodoc/docs/json/scripts",
  "files": [
    {
      "fileName": "cbor_to_plutus.py",
      "filePath": "scripts/cbor_to_plutus.py",
      "url": "https://github.com/opshin/opshin/scripts/cbor_to_plutus.py",
      "summary": "This code is responsible for converting input data from standard input into a JSON object that can be used as a Smart Contract in the opshin project. \n\nThe code first imports the necessary modules, including `json`, `stdin` from `sys`, and `cbor2`. `json` is used to convert the final output into a JSON object, `stdin` is used to read input data from standard input, and `cbor2` is used to encode the input data into a CBOR format. \n\nNext, the code reads the input data from standard input using `stdin.buffer.read()` and encodes it into a CBOR format using `cbor2.dumps()`. The resulting CBOR data is then converted to a hexadecimal string using the `hex()` method. \n\nFinally, the code creates a dictionary object `d` that contains the necessary information for the Smart Contract, including the type of contract (`PlutusScriptV2`), a description that includes the version of the opshin project (`opshin {__version__} Smart Contract`), and the CBOR data in hexadecimal format. The dictionary is then converted to a JSON object using `json.dumps()` and printed to standard output. \n\nThis code can be used as a building block for creating Smart Contracts in the opshin project. By providing input data through standard input, the code can encode the data into a format that can be used as a Smart Contract. The resulting JSON object can then be used in other parts of the project to execute the Smart Contract. \n\nExample usage:\n\n```\n$ echo \"hello world\" | python contract_builder.py\n{\"type\": \"PlutusScriptV2\", \"description\": \"opshin 1.0.0 Smart Contract\", \"cborHex\": \"430a68656c6c6f20776f726c64\"}\n```",
      "questions": "1. What is the purpose of this code?\n   \n   This code takes input from standard input, converts it to CBOR format, and then creates a JSON object with metadata about the CBOR data.\n\n2. What is the significance of the \"PlutusScriptV2\" type in the JSON object?\n   \n   The \"PlutusScriptV2\" type indicates that the CBOR data is a Plutus smart contract script, which is used in the Cardano blockchain.\n\n3. What is the purpose of the opshin version number in the JSON object description?\n   \n   The opshin version number is included in the JSON object description to provide information about the version of the opshin software that was used to create the smart contract. This can be useful for debugging and tracking changes over time."
    },
    {
      "fileName": "hex_to_bytes.py",
      "filePath": "scripts/hex_to_bytes.py",
      "url": "https://github.com/opshin/opshin/scripts/hex_to_bytes.py",
      "summary": "This code reads in a hexadecimal string from user input and then converts it to bytes using the `bytes.fromhex()` method. The resulting bytes are then written to the standard output stream using the `stdout.buffer.write()` method from the `sys` module. \n\nThe purpose of this code is to provide a simple way to convert a hexadecimal string to bytes and output the result. This functionality may be useful in various parts of the larger project, such as when dealing with binary data or network protocols that use hexadecimal encoding. \n\nHere is an example of how this code could be used in a larger project:\n\n```python\n# import the necessary modules\nfrom sys import stdout\n\n# define a hexadecimal string\nhex_str = \"48656c6c6f20576f726c64\"\n\n# convert the string to bytes and write to standard output\nstdout.buffer.write(bytes.fromhex(hex_str))\n```\n\nThis would output the ASCII string \"Hello World\" to the console, since the hexadecimal representation corresponds to the ASCII codes for each character. \n\nOverall, this code provides a simple and efficient way to convert hexadecimal strings to bytes and output the result, which can be useful in various parts of the opshin project.",
      "questions": "1. What is the purpose of the `from sys import stdout` line?\n    \n    This line imports the `stdout` object from the `sys` module, which is used to write output to the console.\n\n2. What does the `input().strip()` line do?\n    \n    This line prompts the user to input a string of hexadecimal characters, and then removes any leading or trailing whitespace from the input.\n\n3. What is the purpose of the `stdout.buffer.write(bytes.fromhex(hex))` line?\n    \n    This line converts the input string of hexadecimal characters into a sequence of bytes, and then writes those bytes to the console using the `stdout` object."
    },
    {
      "fileName": "pluto_to_cbor.sh",
      "filePath": "scripts/pluto_to_cbor.sh",
      "url": "https://github.com/opshin/opshin/scripts/pluto_to_cbor.sh",
      "summary": "This code is a Bash script that uses the pluto tool to assemble input data and output the result to standard output. The purpose of this script is to provide a convenient way to use the pluto tool within the larger opshin project.\n\nThe pluto tool is a code generator that can be used to generate code in various programming languages from a single source file. The input to the pluto tool is typically a template file that contains placeholders for variables that will be replaced with actual values during code generation. The output of the pluto tool is the generated code.\n\nIn this script, the pluto tool is invoked with the \"assemble\" command, which takes input data from standard input and outputs the generated code to standard output. The input data is expected to be in the format that the pluto tool expects, which is typically a JSON or YAML file that contains the values for the variables in the template file.\n\nThe script takes advantage of the fact that Bash provides two special files, /dev/stdin and /dev/stdout, that can be used to read from standard input and write to standard output, respectively. By using these files as the input and output for the pluto tool, the script can easily integrate with other tools and scripts in the opshin project.\n\nHere is an example of how this script might be used in the opshin project:\n\n```\n$ cat input.json | ./assemble.sh > output.py\n```\n\nIn this example, the input data is read from the input.json file and piped to the script using the Bash pipe operator. The output of the script is redirected to the output.py file, which will contain the generated Python code.\n\nOverall, this script provides a simple and flexible way to use the pluto tool within the opshin project, allowing developers to easily generate code in multiple programming languages from a single source file.",
      "questions": "1. What is the purpose of this script?\n   \n   This script appears to be using the `pluto` command to assemble something from standard input and output it to standard output. However, without more context it is unclear what exactly is being assembled.\n\n2. What is the significance of the `/dev/stdin` and `/dev/stdout` arguments?\n   \n   The `/dev/stdin` argument is telling the `pluto` command to read from standard input, while the `/dev/stdout` argument is telling it to output to standard output. This allows the script to be used in a pipeline with other commands.\n\n3. Is there any error handling or input validation in this script?\n   \n   It is not clear from this code whether there is any error handling or input validation. If the `pluto` command encounters an error, it may simply output an error message to standard error and exit with a non-zero status code. It would be important to check the documentation for the `pluto` command to see what kind of error handling it provides."
    },
    {
      "fileName": "python_to_plutus_via_aiken.sh",
      "filePath": "scripts/python_to_plutus_via_aiken.sh",
      "url": "https://github.com/opshin/opshin/scripts/python_to_plutus_via_aiken.sh",
      "summary": "This code is a Bash script that is used to compile a program written in the Opshin language into a format that can be executed on the Plutus platform. The script takes input from standard input and uses the Opshin compiler, which is invoked using the Python 3 interpreter, to generate an intermediate representation of the program. This intermediate representation is then passed through two additional scripts, uplc_to_cbor.sh and cbor_to_plutus.py, which convert the representation into a format that can be executed on the Plutus platform.\n\nThe purpose of this script is to provide a convenient way to compile Opshin programs into a format that can be executed on the Plutus platform. Opshin is a high-level programming language that is designed to be used for writing smart contracts on the Cardano blockchain. The Plutus platform is a development platform for writing smart contracts on the Cardano blockchain, and it uses a custom programming language called Plutus Core.\n\nThe script is designed to be used as part of a larger development workflow for writing smart contracts on the Cardano blockchain. Developers can write their smart contracts in Opshin, and then use this script to compile them into a format that can be executed on the Plutus platform. This allows developers to write their smart contracts in a high-level language that is easier to work with than Plutus Core, while still being able to take advantage of the features provided by the Plutus platform.\n\nExample usage:\n\n```\n$ cat my_contract.opshin | ./compile_opshin.sh > my_contract.plutus\n```\n\nThis command will compile the Opshin program in the file `my_contract.opshin` and output the resulting Plutus program to the file `my_contract.plutus`. The resulting Plutus program can then be deployed to the Cardano blockchain using the Plutus platform.",
      "questions": "1. What is the purpose of this script?\n   - This script is used to compile a file using the `opshin` module and convert it to the Plutus format.\n\n2. What does the `set -e` command do?\n   - The `set -e` command sets the script to exit immediately if any command exits with a non-zero status.\n\n3. What are the `uplc_to_cbor.sh` and `cbor_to_plutus.py` scripts used for?\n   - The `uplc_to_cbor.sh` script is used to convert the output of the `opshin` compile command to the CBOR format, while the `cbor_to_plutus.py` script is used to convert the CBOR output to the Plutus format."
    },
    {
      "fileName": "python_to_plutus_via_pluto.sh",
      "filePath": "scripts/python_to_plutus_via_pluto.sh",
      "url": "https://github.com/opshin/opshin/scripts/python_to_plutus_via_pluto.sh",
      "summary": "This code is a Bash script that compiles a program written in the Pluto programming language into CBOR format, which is a binary data format used for encoding data structures. The compiled CBOR code is then converted back into Pluto format using another script. \n\nThe script takes in input from standard input (stdin) and uses the `opshin` Python module to compile the Pluto code. The `compile_pluto` function from the `opshin` module is called with `/dev/stdin` as the input file, which reads from the standard input. The output of this function is then piped into the `pluto_to_cbor.sh` Bash script, which converts the Pluto code into CBOR format. Finally, the output of this script is piped into the `cbor_to_plutus.py` Python script, which converts the CBOR code back into Pluto format.\n\nThis code is likely used as part of a larger project that involves compiling and executing Pluto programs. The `opshin` module is likely a key component of this project, providing the functionality to compile Pluto code into various formats. The use of Bash scripts and Python scripts suggests that this project may involve multiple programming languages and technologies.\n\nExample usage of this script might involve piping Pluto code from a file into the script, like so:\n\n```\ncat my_pluto_program.pluto | ./compile_pluto.sh\n```\n\nThis would compile the Pluto code in `my_pluto_program.pluto` into CBOR format and then back into Pluto format, with the resulting output being printed to the console.",
      "questions": "1. What is the purpose of this script?\n   - This script is used to compile a Pluto program to CBOR format for use in the Plutus blockchain platform.\n\n2. What dependencies are required to run this script?\n   - This script requires Python 3 and the opshin, pluto_to_cbor.sh, and cbor_to_plutus.py modules to be installed.\n\n3. What is the expected input format for this script?\n   - The script expects a Pluto program to be piped in through stdin, which will then be compiled to CBOR format and converted to Plutus format."
    },
    {
      "fileName": "uplc_to_cbor.sh",
      "filePath": "scripts/uplc_to_cbor.sh",
      "url": "https://github.com/opshin/opshin/scripts/uplc_to_cbor.sh",
      "summary": "This code is a Bash script that takes in a hexadecimal string as input and converts it to bytes using a Python script. The purpose of this code is to provide a convenient way to convert hexadecimal strings to bytes within the larger opshin project.\n\nThe script first sets the Bash shell to exit immediately if any command fails (`set -e`). It then changes the current working directory to the directory containing the script (`cd \"$(dirname \"$0\")\"`).\n\nThe main functionality of the script is performed by the `aiken` command, which is a tool for working with binary data. Specifically, it uses the `uplc` subcommand to convert the input from hexadecimal to binary format. The `flat` subcommand is used to read the input from standard input (`/dev/stdin`). The `-p` flag is used to output the binary data as a Python byte array literal, and the `-c` flag is used to output the byte array as a single line of text.\n\nThe output of the `aiken` command is then piped (`|`) to a Python script called `hex_to_bytes.py`. This script reads the byte array literal from standard input and evaluates it as a Python expression, which converts it to a bytes object. The resulting bytes object is then printed to standard output.\n\nHere is an example of how this code might be used in the larger opshin project:\n\n```bash\n$ echo \"deadbeef\" | ./convert_hex_to_bytes.sh\nb'\\xde\\xad\\xbe\\xef'\n```\n\nIn this example, the hexadecimal string \"deadbeef\" is piped to the `convert_hex_to_bytes.sh` script. The script converts the string to bytes and outputs the resulting bytes object (`b'\\xde\\xad\\xbe\\xef'`). This functionality could be useful in various parts of the opshin project that require working with binary data, such as cryptography or network protocols.",
      "questions": "1. What is the purpose of this script and how is it intended to be used?\n   - This script appears to be executing a command pipeline that involves converting hex to bytes. The purpose and usage context of this script should be clarified in the documentation.\n   \n2. What is the significance of the `set -e` command at the beginning of the script?\n   - The `set -e` command enables the script to exit immediately if any command in the pipeline fails. The documentation should explain why this behavior is desirable and how it affects the script's execution.\n   \n3. What is the `aiken uplc flat` command and what are its options?\n   - The `aiken uplc flat` command is not a standard Unix command and its purpose and options are not immediately clear. The documentation should provide more information about this command and how it fits into the overall pipeline."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/scripts` folder contains various scripts that are used for converting and compiling data in different formats within the opshin project. These scripts are primarily written in Python and Bash and are designed to work together to achieve specific tasks related to data conversion and compilation.\n\nFor instance, the `cbor_to_plutus.py` script is responsible for converting input data into a JSON object that can be used as a Smart Contract in the opshin project. It reads input data from standard input, encodes it into CBOR format, and then converts it to a hexadecimal string. The resulting JSON object can be used in other parts of the project to execute the Smart Contract. Example usage:\n\n```bash\n$ echo \"hello world\" | python contract_builder.py\n{\"type\": \"PlutusScriptV2\", \"description\": \"opshin 1.0.0 Smart Contract\", \"cborHex\": \"430a68656c6c6f20776f726c64\"}\n```\n\nThe `hex_to_bytes.py` script is a simple utility that converts a hexadecimal string to bytes and outputs the result. This functionality may be useful in various parts of the larger project, such as when dealing with binary data or network protocols that use hexadecimal encoding.\n\nThe `pluto_to_cbor.sh` script is a Bash script that uses the pluto tool to assemble input data and output the result to standard output. This script provides a convenient way to use the pluto tool within the larger opshin project, allowing developers to easily generate code in multiple programming languages from a single source file.\n\nThe `python_to_plutus_via_aiken.sh` script compiles a program written in the Opshin language into a format that can be executed on the Plutus platform. This script allows developers to write their smart contracts in a high-level language that is easier to work with than Plutus Core, while still being able to take advantage of the features provided by the Plutus platform.\n\nThe `python_to_plutus_via_pluto.sh` script compiles a program written in the Pluto programming language into CBOR format and then converts it back into Pluto format. This script is likely used as part of a larger project that involves compiling and executing Pluto programs.\n\nLastly, the `uplc_to_cbor.sh` script is a Bash script that takes in a hexadecimal string as input and converts it to bytes using a Python script. This functionality could be useful in various parts of the opshin project that require working with binary data, such as cryptography or network protocols.\n\nOverall, the scripts in this folder provide essential functionality for data conversion and compilation within the opshin project. They are designed to work together and can be used in various parts of the project to achieve specific tasks related to data manipulation and processing.",
  "questions": ""
}