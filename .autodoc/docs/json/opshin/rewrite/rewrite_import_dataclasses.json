{
  "fileName": "rewrite_import_dataclasses.py",
  "filePath": "opshin/rewrite/rewrite_import_dataclasses.py",
  "url": "https://github.com/opshin/opshin/opshin/rewrite/rewrite_import_dataclasses.py",
  "summary": "The code in this file is responsible for checking that the `dataclasses` module has been imported and used correctly in a Python program. Specifically, it checks that there is an import statement for `dataclass` and that any class definitions use the `@dataclass` decorator.\n\nThe `RewriteImportDataclasses` class is a subclass of `CompilingNodeTransformer`, which is a utility class for modifying and transforming Python abstract syntax trees (ASTs). The `visit_ImportFrom` method is called for each `ImportFrom` node in the AST, and it checks that the module being imported is `dataclasses`. If so, it checks that there is only one import name (`dataclass`) and that it is not being aliased with an `as` clause. If these conditions are met, it sets the `imports_dataclasses` attribute to `True`.\n\nThe `visit_ClassDef` method is called for each `ClassDef` node in the AST, and it checks that `dataclasses` has been imported (by checking the `imports_dataclasses` attribute) and that the class definition has exactly one decorator, which is the `@dataclass` decorator. If the decorator is a function call (i.e. `@dataclass()`), it extracts the function name; otherwise, it assumes that the decorator is a simple name (i.e. `@dataclass`). If any of these conditions are not met, an `AssertionError` is raised.\n\nOverall, this code is useful for ensuring that a Python program is using `dataclasses` correctly, which can be important for maintaining code quality and consistency. For example, it could be used as part of a larger code analysis or linting tool to enforce best practices for Python class definitions. Here is an example of how this code might be used:\n\n```python\nfrom opshin import RewriteImportDataclasses\nimport ast\n\n# Parse the Python code into an AST\ncode = \"\"\"\nfrom dataclasses import dataclass\n\n@dataclass\nclass MyClass:\n    name: str\n    age: int\n\"\"\"\n\ntree = ast.parse(code)\n\n# Create an instance of the transformer and apply it to the AST\ntransformer = RewriteImportDataclasses()\nnew_tree = transformer.visit(tree)\n\n# If there were any errors, an AssertionError will be raised\n# Otherwise, the transformed AST can be used for further analysis or modification\n```",
  "questions": "1. What is the purpose of the `RewriteImportDataclasses` class?\n- The `RewriteImportDataclasses` class checks that there was an import of dataclass if there are any class definitions.\n\n2. What does the `visit_ImportFrom` method do?\n- The `visit_ImportFrom` method checks if the module being imported is \"dataclasses\" and sets the `imports_dataclasses` attribute to True if it is.\n\n3. What is the purpose of the `visit_ClassDef` method?\n- The `visit_ClassDef` method checks that dataclasses have been imported and that class definitions have the decorator `@dataclass`."
}